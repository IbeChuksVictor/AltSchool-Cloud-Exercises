---
- name: Remote Lamp Setup for {{ app_name }} app
  hosts: laravel_app_server
  remote_user: azureuser
  become: true
 
 
  tasks:
    - name: index repo update
      apt:
        update_cache: true
        upgrade: true
    - name: required dependencies update
      apt:
        name:
          - python3-pip
          - git
          - lsb-release
          - ca-certificates
          - apt-transport-https
          - software-properties-common
          - gnupg2
          - curl
          - wget
          - debconf-utils
          - libaio1

    - name: pymysql
      shell: python3 -m pip install PyMySQL

    - name: pip
      shell: pip install cryptography

    - name: install apache2
      apt:
        name: apache2, apache2-utils

    - name: php repo
      apt_repository:
        repo: ppa:ondrej/php

    - name: index repo update
      apt:
        update_cache: true
        upgrade: true

    - name: install php
      apt:
        name: php8.1, libapache2-mod-php8.1, php8.1-cli, php8.1-common, php8.1-mysql, php8.1-opcache, php8.1-soap, php8.1-zip, php8.1-intl, php8.1-bcmath, php8.1-xml, php8.1-xmlrpc, php8.1-curl, php8.1-gd, php8.1-imagick, php8.1-cli, php8.1-dev, php8.1-imap, php8.1-mbstring

    - name: mysql dependencies
      shell:
        debconf-set-selections <<EOF
        mysql-apt-config mysql-apt-config/select-server select mysql-8.0
        "mysql-community-server mysql-community-server/root-pass password root"
        "mysql-community-server mysql-community-server/re-root-pass password root"
        EOF

    - name: install mysql
      shell: wget --user-agent="Mozilla" -O /tmp/mysql-apt-config_0.8.24-1_all.deb https://dev.mysql.com/get/mysql-apt-config_0.8.24-1_all.deb

    - name: mysql interactive
      shell: sudo DEBIAN_FRONTEND=noninteractive dpkg -i /tmp/mysql-apt-config_0.8.24-1_all.deb < /dev/null > /dev/null

    - name: index repo update
      apt:
        update_cache: true
        upgrade: true

    - name: mysql sever and mysql client
      shell: DEBIAN_FRONTEND=noninteractive apt-get install mysql-server mysql-client --assume-yes --force-yes < /dev/null > /dev/null

    - name: create database
      shell: 'mysql -ne root'
      with_items:
        - CREATE DATABASE {{ db_name }};

    - name: create database user
      shell: 'mysql -ne "{{ db_user}}"'
      with_items:
        - CREATE USER '{{ db_user }}'@'localhost' IDENTIFIED BY '{{ db_user_password }}';

    - name: granting privileges to database user
      shell: 'mysql -ne "root"'
      with_items:
        - GRANT ALL PRIVILEGES ON {{ app_name }}.* TO '{{ app_name }}'@'localhost';

    - name: flushing user privileges
      shell: 'mysql -ne "root"'
      with_items:
        - FLUSH PRIVILEGES;

    - name: copying bash script to install postgresql
      copy:
        src: /home/azureuser/postgresql.sh
        dest: ~/azureuser/

    - name: running bash script to install postgresl
      shell: bash ~/azureuser/postgresql.sh

    - name: git clone laravel app
      shell: git clone https://github.com/f1amy/{{ app_name }}-realworld-example-app.git /var/www/{{ app_name }}

    - name: configuring .env file
      copy:
        dest: /var/www/{{ app_name }}/.env
        content: |
          APP_NAME="{{ app_name }}"
          APP_ENV=local
          APP_KEY=
          APP_DEBUG=true
          APP_URL=https://{{ domain_name }}
          APP_PORT=3000
          LOG_CHANNEL=stack
          LOG_DEPRECATIONS_CHANNEL=null
          LOG_LEVEL=debug
          DB_CONNECTION=mysql
          DB_HOST=localhost
          DB_PORT=3306
          DB_DATABASE={{ app_name }}
          DB_USERNAME={{ app_name }}
          DB_PASSWORD={{ app_name }}
          BROADCAST_DRIVER=log
          CACHE_DRIVER=file
          FILESYSTEM_DISK=local
          QUEUE_CONNECTION=sync
          SESSION_DRIVER=file
          SESSION_LIFETIME=120
          MEMCACHED_HOST=127.0.0.1
          REDIS_HOST=127.0.0.1
          REDIS_PASSWORD=null
          REDIS_PORT=6379
          MAIL_MAILER=smtp
          MAIL_HOST=mailhog
          MAIL_PORT=1025
          MAIL_USERNAME=null
          MAIL_PASSWORD=null
          MAIL_ENCRYPTION=null
          MAIL_FROM_ADDRESS="hello@example.com"
          MAIL_FROM_NAME="${APP_NAME}"
          AWS_ACCESS_KEY_ID=
          AWS_SECRET_ACCESS_KEY=
          AWS_DEFAULT_REGION=us-east-1
          AWS_BUCKET=
          AWS_USE_PATH_STYLE_ENDPOINT=false
          PUSHER_APP_ID=
          PUSHER_APP_KEY=
          PUSHER_APP_SECRET=
          PUSHER_APP_CLUSTER=mt1
          MIX_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
          MIX_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"
          L5_SWAGGER_GENERATE_ALWAYS=true
          SAIL_XDEBUG_MODE=develop,debug
          SAIL_SKIP_CHECKS=true

    - name: web page
      blockinfile:
        path: /var/www/{{ app_name }}/routes/web.php
        block: |
          Route::get('/', function () {
            return view('welcome');
          });

    - name: set app owner
      shell: chown -R www-data:www-data /var/www/{{ app_name }}

    - name: set app rwx pemissions
      shell: chmod -R 0755 /var/www/{{ app_name }}

    - name: set app storage permissions
      shell: chmod -R 0755 /var/www/{{ app_name }}/storage

    - name: set app cache permissions
      shell: chmod -R 0755 /var/www/{{ app_name }}/bootstrap/cache

    - name: copying .htaccess file to app server
      copy:
        dest: "/var/www/{{ app_name }}/.htaccess"
        content: |
          <IfModule mod_rewrite.c>
            RewriteEngine On
            RewriteCond %{REQUEST_URI} !^/public/
            RewriteCond %{REQUEST_FILENAME} !-d
            RewriteCond %{REQUEST_FILENAME} !-f
            RewriteRule ^(.*)$ /public/$1
            RewriteRule ^(/)?$ public/index.php [L]
          </IfModule>

    - name: php composer setup
      shell: php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"

    - name: php repository file
      shell: php -r "if (hash_file('sha384', 'composer-setup.php') === '55ce33d7678c5a611085589f1f3ddf8b3c52d662cd01d4ba75c0ee0459970c2200a51f492d557530c71c15d8dba01eae') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"

    - name: composer setup
      shell: php composer-setup.php

    - name: unlinking php
      shell: php -r "unlink('composer-setup.php');"

    - name: moving composer to run globally
      shell: mv composer.phar /usr/local/bin/composer

    - name: composer create project
      shell: cd /var/www/{{ app_name }} && composer create-project -n

    - name: migartion seed
      shell: cd /var/www/{{ app_name }} && php artisan migrate --seed

    - name: apache config file
      copy:
        dest: "/etc/apache2/sites-available/domain.conf"
        content: |
          <VirtualHost *:80>
              ServerAdmin email@domain.com
              ServerName domain.com
              ServerAlias domain.com
              DocumentRoot /var/www/{{ app_name }}/public
              <Directory /var/www/{{ app_name }}/public>
                  Options Indexes FollowSymLinks
                  AllowOverride All
                  Require all granted
              </Directory>
              ErrorLog ${APACHE_LOG_DIR}/error.log
              CustomLog ${APACHE_LOG_DIR}/access.log combined
          </VirtualHost>

    - name: disabling default apache site
      shell: a2dissite 000-default.conf

    - name: enabling new site
      shell: a2ensite {{ app_name }}.conf

    - name: enabling mod rewrite
      shell: a2enmod rewrite

    - name: restarting apache
      service:
        name: apache2
        state: restarted

    - name: app ownership change
      shell: chown -R www-data:www-data /var/www/{{ app_name }}

    - name: ssl package install snap
      apt:
        name:
          - snapd

    - name: snap install core
      shell: snap install core

    - name: snap refresh core
      shell: snap refresh core

    - name: snap install cerboot
      shell: snap install --classic certbot
    - name: linking cerbook
      shell: ln -s /snap/bin/certbot /usr/bin/certbot

    - name: ssl cert config
      shell: yes | certbot --apache --agree-tos --redirect -m support@{{ domain_name }} -d "{{ domain_name }}" -d www."{{ domain_name }}"
 